import CalendarAppSingleton from '@schedule-x/shared/src/interfaces/calendar/calendar-app-singleton'
import { CalendarEventInternal } from '@schedule-x/shared/src/interfaces/calendar/calendar-event.interface'

const updateRecurringEvent = (
  $app: CalendarAppSingleton,
  eventCopy: CalendarEventInternal,
  startPreDrag: string
) => {
  $app.config.plugins.eventRecurrence?.updateRecurrenceDND(
    eventCopy.id,
    startPreDrag,
    eventCopy.start
  )
}

const updateNonRecurringEvent = (
  $app: CalendarAppSingleton,
  eventCopy: CalendarEventInternal,
  mustBeDuplicated: boolean //
) => {
  const eventToUpdate = $app.calendarEvents.list.value.find(
    (event) => event.id === eventCopy.id
  )
  if (!eventToUpdate) return

  if (mustBeDuplicated) {
    if ($app.config.callbacks.idFactory) {
      eventCopy.id = $app.config.callbacks.idFactory()
    } else {
      // new id must be generated by default
      eventCopy.id = Math.random().toString(36).substring(2, 12)
    }
    const copiedEvents = [...$app.calendarEvents.list.value]
    copiedEvents.push(eventCopy)
    $app.calendarEvents.list.value = copiedEvents
  } else {
    eventToUpdate.start = eventCopy.start
    eventToUpdate.end = eventCopy.end
  }

  $app.calendarEvents.list.value = [...$app.calendarEvents.list.value]
}

export const updateDraggedEvent = (
  $app: CalendarAppSingleton,
  eventCopy: CalendarEventInternal,
  startPreDrag: string,
  mustBeDuplicated: boolean
) => {
  if (
    'rrule' in eventCopy._getForeignProperties() &&
    $app.config.plugins.eventRecurrence
  ) {
    updateRecurringEvent($app, eventCopy, startPreDrag)
  } else {
    updateNonRecurringEvent($app, eventCopy, mustBeDuplicated)
  }

  if ($app.config.callbacks.onEventUpdate) {
    $app.config.callbacks.onEventUpdate(
      eventCopy._getExternalEvent(),
      mustBeDuplicated
    )
  }
}
